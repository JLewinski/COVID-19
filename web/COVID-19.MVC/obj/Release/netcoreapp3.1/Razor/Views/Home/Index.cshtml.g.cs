#pragma checksum "C:\Users\jdlew\Documents\GitHub\COVID-19\web\COVID-19.MVC\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "68356cb4a43b60626b4869f5d958cc8ed3833ff8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\jdlew\Documents\GitHub\COVID-19\web\COVID-19.MVC\Views\_ViewImports.cshtml"
using COVID_19.MVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jdlew\Documents\GitHub\COVID-19\web\COVID-19.MVC\Views\_ViewImports.cshtml"
using COVID_19.MVC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"68356cb4a43b60626b4869f5d958cc8ed3833ff8", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"95ac057397a8a18bfbcec8760673c15019af9eb0", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "_KnockoutScriptsPartial", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/chart/Chart.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\jdlew\Documents\GitHub\COVID-19\web\COVID-19.MVC\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div data-bind=""foreach: chartGroups"">
    <div class=""row"">
        <div class=""col-md-4 col-lg-3"">
            <canvas data-bind=""attr: { id: 'stateConfirmedChart' + groupIndex }"" id=""stateConfirmedChart"" width=""400"" height=""400""></canvas>
        </div>
        <div class=""col-md-4 col-lg-3"">
            <canvas data-bind=""attr: { id: 'stateDeathsChart' + groupIndex }"" id=""stateDeathsChart"" width=""400"" height=""400""></canvas>
        </div>
        <div class=""col-md-4 col-lg-3"">
            <canvas data-bind=""attr: { id: 'percentInfectedChart' + groupIndex }"" id=""percentInfectedChart"" width=""400"" height=""400""></canvas>
        </div>
        <div class=""col-md-4 col-lg-3"">
            <canvas data-bind=""attr: { id: 'percentFatalChart' + groupIndex }"" id=""percentFatalChart"" width=""400"" height=""400""></canvas>
        </div>
    </div>
    <div class=""row"">
        <div class=""col align-self-end text-right"">
            <div class=""slidecontainer"">
                <label>Offset (<span data");
            WriteLiteral(@"-bind=""text: offset""></span>)</label>
                <input type=""range"" min=""0"" max=""30"" value=""15"" class=""slider"" data-bind=""value: offset, event: {change: $root.updateFatality}"" />
            </div>
            <div class=""slidecontainer"">
                <label>Range (<span data-bind=""text: range""></span>)</label>
                <input type=""range"" min=""1"" max=""20"" value=""5"" class=""slider"" data-bind=""value: range, event: {change: $root.updateFatality}"" />
            </div>
        </div>
    </div>
    <div class=""row"">
        <select id=""stateSelect"" class=""form-control"" data-bind=""options: selectedCountry.states, value: selectedState, event: { change: $root.updateCharts }"" value=""Alabama"">
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "68356cb4a43b60626b4869f5d958cc8ed3833ff86119", async() => {
                WriteLiteral("Alabama");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "68356cb4a43b60626b4869f5d958cc8ed3833ff87090", async() => {
                WriteLiteral("California");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "68356cb4a43b60626b4869f5d958cc8ed3833ff88064", async() => {
                WriteLiteral("Colorado");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "68356cb4a43b60626b4869f5d958cc8ed3833ff89036", async() => {
                WriteLiteral("Florida");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "68356cb4a43b60626b4869f5d958cc8ed3833ff810007", async() => {
                WriteLiteral("Georgia");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "68356cb4a43b60626b4869f5d958cc8ed3833ff810979", async() => {
                WriteLiteral("Maryland");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "68356cb4a43b60626b4869f5d958cc8ed3833ff811952", async() => {
                WriteLiteral("New York");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "68356cb4a43b60626b4869f5d958cc8ed3833ff812925", async() => {
                WriteLiteral("Ohio");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        </select>\r\n        <select id=\"countrySelect\" class=\"form-control\" data-bind=\"options: $root.countries, optionsText: \'name\', value: selectedCountry\">\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "68356cb4a43b60626b4869f5d958cc8ed3833ff814065", async() => {
                WriteLiteral("US");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        </select>\r\n\r\n    </div>\r\n</div>\r\n<div class=\"row\">\r\n    <small>All data from <a href=\"https://github.com/CSSEGISandData/COVID-19\">Johns Hopkins University</a></small>\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "68356cb4a43b60626b4869f5d958cc8ed3833ff815324", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "68356cb4a43b60626b4869f5d958cc8ed3833ff816505", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script type=""text/javascript"">
        var colors = [
            'rgb(0,128,0)',
            'rgb(141,182,0)',
            'rgb(0,255,255)',
            'rgb(253,238,0)',
            'rgb(0,127,255)',
            'rgb(0,0,255)',
            'rgb(0,221,221)',
            'rgb(242,101,34)',
            'rgb(12,35,64)',
            'rgb(150,0,24)',
            'rgb(150,75,0)',
            'rgb(0,71,171)',
            'rgb(255,40,0)',
            'rgb(255,0,79)',
            'rgb(255,223,0)',
            'rgb(0,255,0)',
            'rgb(128,0,0)',
            'rgb(0,250,154)',
            'rgb(255,0,0)',
            'rgb(255,103,0)'
        ];
        var dates;

        $(() => {


            function CreateBarPlot(elementId, dates, dataSets, title, type) {
                var ctx = document.getElementById(elementId);
                return new Chart(ctx, {
                    type: type ?? 'bar',
                    data: {
                        labels: dates,
      ");
                WriteLiteral(@"                  datasets: dataSets
                    },
                    options: {
                        legend: {
                            display: false
                        },
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        },
                        title: {
                            display: true,
                            text: title
                        }
                    }
                });
            }

            function UpdateChart(chart, data, title) {
                chart.data.datasets[0] = data;
                if (title) chart.options.title.text = title;
                chart.update();
            }

            function UpdatePercentFatalChart(chartGroup) {
                var offset = 1*chartGroup.offset;
                var ran");
                WriteLiteral(@"ge = 1*chartGroup.range;
                var percentageData = [];
                var tempDates = [];
                var dataIndex = 0;
                chartGroup.confirmedData.forEach((x, index) => {
                    var confirmed = 0;
                    var deaths = 0;

                    if (range + offset >= chartGroup.deathData.length) {
                        return;
                    }

                    for (var i = 0; i < range; i++) {
                        confirmed += chartGroup.confirmedData[index + i];
                        deaths += chartGroup.deathData[index + i + offset];
                    }
                    var tempData = confirmed ? deaths / confirmed * 100 : deaths * 100;

                    if (tempData || percentageData.length) {
                        percentageData[dataIndex] = tempData;
                        tempDates[dataIndex++] = dates[index + offset + range / 2] ?? dates[index + offset + range / 2 - 0.5];
                    }
         ");
                WriteLiteral(@"       });

                var popped = percentageData.pop();
                while (!popped && percentageData.length) {
                    tempDates.pop();
                    popped = percentageData.pop();
                }
                percentageData.push(popped);

                if (!chartGroup.percentFatalChart) {
                    var percentage = {
                        data: percentageData,
                        backgroundColor: colors[0],
                        borderColor: colors[0]
                    };
                    chartGroup.percentFatalChart = CreateBarPlot('percentFatalChart' + chartGroup.groupIndex, tempDates, [percentage], 'Death Percentage');
                    chartGroup.percentFatalChart.options.scales.yAxes[0].ticks.max = 25;
                    chartGroup.percentFatalChart.options.scales.yAxes[0].scaleLabel.labelString = 'Percent Fatal'
                    chartGroup.percentFatalChart.options.scales.yAxes[0].scaleLabel.display = true;
            ");
                WriteLiteral(@"        chartGroup.percentFatalChart.update();
                }
                else {
                    chartGroup.percentFatalChart.data.labels = tempDates;
                    chartGroup.percentFatalChart.data.datasets[0].data = percentageData;
                    chartGroup.percentFatalChart.update();
                }
            }

            function GetStateData(chartGroup) {
                $.getJSON('");
#nullable restore
#line 171 "C:\Users\jdlew\Documents\GitHub\COVID-19\web\COVID-19.MVC\Views\Home\Index.cshtml"
                      Write(Url.Action("GetStateData"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"?state=' + chartGroup.selectedState + '&country=' + chartGroup.selectedCountry.name).done(result => {
                    if (!result.success) {
                        console.error('State: ' + result.errorMessage);
                        return;
                    }
                    dates = result.dates;
                    chartGroup.confirmedData = result.confirmedCases.data;
                    var title = chartGroup.selectedState + ' New Confirmed Cases';
                    if (!chartGroup.confirmedChart) {
                        var confirmed = {
                            data: chartGroup.confirmedData,
                            backgroundColor: colors[7],
                            borderColor: colors[7]
                        };
                        chartGroup.confirmedChart = CreateBarPlot('stateConfirmedChart' + chartGroup.groupIndex, result.dates, [confirmed], title);
                    } else {
                        chartGroup.confirmedChart.data.datasets[0].dat");
                WriteLiteral(@"a = chartGroup.confirmedData;
                        chartGroup.confirmedChart.options.title.text = title;
                        chartGroup.confirmedChart.update();
                    }

                    chartGroup.deathData = result.deaths.data;
                    title = chartGroup.selectedState + ' New Deaths';
                    if (!chartGroup.deathChart) {
                        var deaths = {
                            data: chartGroup.deathData,
                            backgroundColor: colors[8],
                            borderColor: colors[8]
                        };
                        chartGroup.deathChart = CreateBarPlot('stateDeathsChart' + chartGroup.groupIndex, result.dates, [deaths], title);
                    } else {
                        chartGroup.deathChart.data.datasets[0].data = chartGroup.deathData;
                        chartGroup.deathChart.options.title.text = title;
                        chartGroup.deathChart.update();
              ");
                WriteLiteral(@"      }

                    var percentInfectedData = [];
                    var total = 0;
                    result.confirmedCases.data.forEach((x, i) => {
                        total += x;
                        percentInfectedData[i] = total / result.deaths.population * 100;
                    });
                    title = chartGroup.selectedState + ' Percent of Population That Has Been (Confirmed) Infected';
                    if (!chartGroup.percentInfectedChart) {
                        var percentInfectedDataSet = [
                            {
                                data: percentInfectedData,
                                backgroundColor: colors[14],
                                borderColor: colors[14]
                            }
                        ];
                        chartGroup.percentInfectedChart = CreateBarPlot('percentInfectedChart' + chartGroup.groupIndex, result.dates, percentInfectedDataSet, title, 'line');
                    } else {");
                WriteLiteral(@"
                        chartGroup.percentInfectedChart.data.datasets[0].data = percentInfectedData;
                        chartGroup.percentInfectedChart.options.title.text = title;
                        chartGroup.percentInfectedChart.update();
                    }

                    UpdatePercentFatalChart(chartGroup);
                });
            }

            $.getJSON('");
#nullable restore
#line 233 "C:\Users\jdlew\Documents\GitHub\COVID-19\web\COVID-19.MVC\Views\Home\Index.cshtml"
                  Write(Url.Action("GetCountryList"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"').done(result => {
                if (!result.success) {
                    console.error('Country: ' + result.errorMessage);
                    return;
                }
                self = {
                    countries: result.countries,
                    selectedCountry: {},
                    chartGroups: [{ groupIndex: 0, selectedCountry: {}, selectedState: {}, offset: 15, range: 5 },
                        { groupIndex: 1, selectedCountry: {}, selectedState: {}, offset: 15, range: 5 }],
                    updateCharts: GetStateData,
                    updateFatality: UpdatePercentFatalChart
                };

                ko.track(self);
                ko.track(self.chartGroups[0]);
                ko.track(self.chartGroups[1]);
                self.countries.forEach(x => { if (x.name == 'US') self.chartGroups[0].selectedCountry = x; });
                self.countries.forEach(x => { if (x.name == 'US') self.chartGroups[1].selectedCountry = x; });

                ");
                WriteLiteral(@"ko.applyBindings(self);
                self.chartGroups[0].selectedState = 'Alabama';
                GetStateData(self.chartGroups[0]);
                self.chartGroups[1].selectedState = 'Georgia';
                GetStateData(self.chartGroups[1]);
            });
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
