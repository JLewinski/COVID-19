@{
    ViewData["Title"] = "Home Page";
}

    <div data-bind="foreach: chartGroups">
        <div class="row">
            <div class="col-md-4 col-lg-3">
                <canvas data-bind="attr: { id: 'stateConfirmedChart' + groupIndex }" id="stateConfirmedChart" width="400" height="400"></canvas>
            </div>
            <div class="col-md-4 col-lg-3">
                <canvas data-bind="attr: { id: 'stateDeathsChart' + groupIndex }" id="stateDeathsChart" width="400" height="400"></canvas>
            </div>
            <div class="col-md-4 col-lg-3">
                <canvas data-bind="attr: { id: 'percentFatalChart' + groupIndex }" id="percentFatalChart" width="400" height="400"></canvas>
            </div>
            <div class="col-md-4 col-lg-3">
                <canvas data-bind="attr: { id: 'percentInfectedChart' + groupIndex }" id="percentInfectedChart" width="400" height="400"></canvas>
            </div>
        </div>
        <div class="row">
            <select id="stateSelect" class="form-control" data-bind="options: selectedCountry.states, value: selectedState, event: { change: $root.updateCharts }" value="Alabama">
                <option>Alabama</option>
                <option>California</option>
                <option>Colorado</option>
                <option>Florida</option>
                <option>Georgia</option>
                <option>Maryland</option>
                <option>New York</option>
                <option>Ohio</option>
            </select>
            <select id="countrySelect" class="form-control" data-bind="options: $root.countries, optionsText: 'name', value: selectedCountry">
                <option>US</option>
            </select>
            <div class="col align-self-end text-right">
                <div class="slidecontainer">
                    <label>Offset (<span data-bind="text: offset"></span>)</label>
                    <input type="range" min="0" max="30" value="15" class="slider" data-bind="value: offset, event: {change: $root.updateFatality}" />
                </div>
                <div class="slidecontainer">
                    <label>Range (<span data-bind="text: range"></span>)</label>
                    <input type="range" min="1" max="20" value="5" class="slider" data-bind="value: range, event: {change: $root.updateFatality}" />
                </div>
            </div>
        </div>
    </div>
<div class="row">

</div>

@section Scripts
{
    <partial name="_KnockoutScriptsPartial" />
    <script src="~/lib/chart/Chart.js"></script>
    <script type="text/javascript">
        var colors = [
            'rgb(0,128,0)',
            'rgb(141,182,0)',
            'rgb(0,255,255)',
            'rgb(253,238,0)',
            'rgb(0,127,255)',
            'rgb(0,0,255)',
            'rgb(0,221,221)',
            'rgb(242,101,34)',
            'rgb(12,35,64)',
            'rgb(150,0,24)',
            'rgb(150,75,0)',
            'rgb(0,71,171)',
            'rgb(255,40,0)',
            'rgb(255,0,79)',
            'rgb(255,223,0)',
            'rgb(0,255,0)',
            'rgb(128,0,0)',
            'rgb(0,250,154)',
            'rgb(255,0,0)',
            'rgb(255,103,0)'
        ];
        var self;
        var dates;
        var confirmedChart;
        var confirmedData;
        var deathChart;
        var deathData;
        var percentFatalChart;
        var percentInfectedChart;

        $(() => {


            function CreateBarPlot(elementId, dates, dataSets, title, type) {
                var ctx = document.getElementById(elementId);
                return new Chart(ctx, {
                    type: type ?? 'bar',
                    data: {
                        labels: dates,
                        datasets: dataSets
                    },
                    options: {
                        legend: {
                            display: false
                        },
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        },
                        title: {
                            display: true,
                            text: title
                        }
                    }
                });
            }

            function UpdateChart(chart, data, title) {
                chart.data.datasets[0] = data;
                if (title) chart.options.title.text = title;
                chart.update();
            }

            function UpdatePercentFatalChart(chartGroup) {
                var offset = 1*chartGroup.offset;
                var range = 1*chartGroup.range;
                var percentageData = [];
                var tempDates = [];
                var dataIndex = 0;
                confirmedData.forEach((x, index) => {
                    var confirmed = 0;
                    var deaths = 0;

                    if (range + offset >= deathData.length) {
                        return;
                    }

                    for (var i = 0; i < range; i++) {
                        confirmed += confirmedData[index + i];
                        deaths += deathData[index + i + offset];
                    }
                    var tempData = confirmed ? deaths / confirmed * 100 : deaths * 100;

                    if (tempData || percentageData.length) {
                        percentageData[dataIndex] = tempData;
                        tempDates[dataIndex++] = dates[index];// dates[index + offset + range / 2] ?? dates[index + offset + range / 2 - 0.5];
                    }
                });

                var popped = percentageData.pop();
                while (!popped && percentageData.length) {
                    tempDates.pop();
                    popped = percentageData.pop();
                }
                percentageData.push(popped);

                if (!chartGroup.percentFatalChart) {
                    var percentage = {
                        data: percentageData,
                        backgroundColor: colors[0],
                        borderColor: colors[0]
                    };
                    chartGroup.percentFatalChart = CreateBarPlot('percentFatalChart' + chartGroup.groupIndex, tempDates, [percentage], 'Death Percentage');
                    chartGroup.percentFatalChart.options.scales.yAxes[0].ticks.max = 25;
                    chartGroup.percentFatalChart.options.scales.yAxes[0].scaleLabel.labelString = 'Percent Fatal'
                    chartGroup.percentFatalChart.options.scales.yAxes[0].scaleLabel.display = true;
                    chartGroup.percentFatalChart.update();
                }
                else {
                    chartGroup.percentFatalChart.data.labels = tempDates;
                    chartGroup.percentFatalChart.data.datasets[0].data = percentageData;
                    chartGroup.percentFatalChart.update();
                }
            }

            function GetStateData(chartGroup) {
                $.getJSON('@Url.Action("GetStateData")?state=' + chartGroup.selectedState + '&country=' + chartGroup.selectedCountry.name).done(result => {
                    if (!result.success) {
                        console.error('State: ' + result.errorMessage);
                        return;
                    }
                    dates = result.dates;
                    confirmedData = result.confirmedCases.data;
                    var confirmed = {
                        data: confirmedData,
                        backgroundColor: colors[7],
                        borderColor: colors[7]
                    };
                    if (!chartGroup.confirmedChart) {
                        chartGroup.confirmedChart = CreateBarPlot('stateConfirmedChart' + chartGroup.groupIndex, result.dates, [confirmed], chartGroup.selectedState + ' New Confirmed Cases');
                    } else {
                        UpdateChart(chartGroup.confirmedChart, confirmed, chartGroup.selectedState + ' New Confirmed Cases');
                    }



                    deathData = result.deaths.data;
                    var deaths = {
                        data: deathData,
                        backgroundColor: colors[8],
                        borderColor: colors[8]
                    };
                    if (!chartGroup.deathChart) {
                        chartGroup.deathChart = CreateBarPlot('stateDeathsChart' + chartGroup.groupIndex, result.dates, [deaths], chartGroup.selectedState + ' New Deaths');
                    } else {
                        UpdateChart(chartGroup.deathChart, deaths, chartGroup.selectedState + ' New Deaths');
                    }

                    var percentInfectedData = [];
                    var total = 0;
                    result.confirmedCases.data.forEach((x, i) => {
                        total += x;
                        percentInfectedData[i] = total / result.deaths.population * 100;
                    });

                    if (!chartGroup.percentInfectedChart) {
                        var percentInfectedDataSet = [
                            {
                                data: percentInfectedData,
                                backgroundColor: colors[17],
                                borderColor: colors[17]
                            }
                        ];
                        chartGroup.percentInfectedChart = CreateBarPlot('percentInfectedChart' + chartGroup.groupIndex, result.dates, percentInfectedDataSet, chartGroup.selectedState + ' Percent of Population That Has Been (Confirmed) Infected', 'line');
                    } else {
                        chartGroup.percentInfectedChart.data.datasets[0].data = percentInfectedData;
                        chartGroup.percentInfectedChart.options.title.text = chartGroup.selectedState + ' Percent of Population That Has Been (Confirmed) Infected';
                        chartGroup.percentInfectedChart.update();
                    }

                    UpdatePercentFatalChart(chartGroup);
                });
            }

            $.getJSON('@Url.Action("GetCountryList")').done(result => {
                if (!result.success) {
                    console.error('Country: ' + result.errorMessage);
                    return;
                }
                self = {
                    countries: result.countries,
                    selectedCountry: {},
                    chartGroups: [{ groupIndex: 0, selectedCountry: {}, selectedState: {}, offset: 15, range: 5 }],
                    updateCharts: GetStateData,
                    updateFatality: UpdatePercentFatalChart
                };

                ko.track(self);
                ko.track(self.chartGroups[0]);
                self.countries.forEach(x => { if (x.name == 'US') self.chartGroups[0].selectedCountry = x; });

                ko.applyBindings(self);
                self.chartGroups[0].selectedState = 'Alabama';
                GetStateData(self.chartGroups[0]);

                //$('select').on('change', () => {
                //    GetStateData($('#stateSelect').val());
                //});

                //$('.slider').on('change', () => { UpdatePercentFatalChart(); });
            });
        });
    </script>
}